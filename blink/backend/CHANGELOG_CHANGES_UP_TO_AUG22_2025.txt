Changelog â€” Changes made up to 2025-08-22

Overview
This document lists code changes and feature work performed in the backend (Express + Supabase) up to Aug 22, 2025. Each entry explains what was changed, why, where (file paths), and how it was verified.

High-level goals addressed
- Remove magic-link auth and implement normal signup/login flows (admin via .env)
- Modular Express backend wired to Supabase (admin & anon clients)
- Persistent sessions with Postgres-backed store
- Product image uploads to Supabase Storage
- Customer profile CRUD (avatar upload, soft-delete)
- Cart ownership hardening and admin cart actions with audit events
- Integration test scripts (curl/bash) covering key flows

File-by-file summary (major files added/edited)

1) server.js
 - What: Entry point. Loads env, session store and mounts all routes.
 - Why: Central app wiring for routes and session management.
 - Key lines: mounts `/api/auth`, `/api/products`, `/api/cart`, `/api/orders`, `/api/admin`, `/api/customers`.
 - Verification: Server runs; integration tests hit endpoints successfully.

2) src/config/supabaseClient.js
 - What: Exposes two Supabase clients: `supabaseAdmin` (service_role) and `supabaseAnon`.
 - Why: Use service-role client for server-side DB/storage operations and anon client for limited operations where needed.

3) src/config/sessionStore.js
 - What: Configures `express-session` store using Postgres via `connect-pg-simple`; falls back to MemoryStore if DB not configured.
 - Why: Persistent sessions across restarts.

4) src/controllers/authController.js
 - What: Signup/login/me/logout endpoints. Removed magic-link flow. Admin login checks credentials from env (AUTH_U/AUTH_P). Auto-provisions a `customers` row for admin on login using `ensureCustomer`.
 - Why: Simpler email/password flow and admin management.
 - Notable behavior: Signup prevents duplicates and returns structured error { code: 'USER_ALREADY_EXISTS' }.

5) src/controllers/productController.js
 - What: Product CRUD, image upload (`addImages`). Uses `multer` memory storage to upload to Supabase Storage and create signed URLs.
 - Why: Support product images in storage with signed URLs returned for clients.

6) src/controllers/cartController.js
 - What: Cart APIs: `getCart`, `addItem`, `updateItemQty`, `removeItem`.
 - Why: Enforce that cart operations affect only the logged-in customer's cart. Server ignores client-supplied cart identifiers for add and validates ownership on update/delete, returning 403 if mismatched.
 - Verification: `test/cross_user_cart.sh` confirms cross-user protections.

7) src/controllers/orderController.js
 - What: Create orders from cart, list orders, update order status. Checks product stock and decrements stock on successful order.

8) src/controllers/customerController.js
 - What: Customer profile endpoints: `getMe`, `updateMe`, `uploadAvatar`, `deleteMe`.
 - Changes made: Avatar handling updated to store object path (not permanent signed URL), generate signed URL on `GET /me`, and remove avatar object on account deletion.
 - Why: Avoid storing expiring signed URLs in DB; allow cleanup on delete.
 - Verification: `test/profile_integration.sh` exercises signup, update, avatar upload, get, and delete flows.

9) src/controllers/adminCartController.js
 - What: Admin-only endpoints to add/remove items from any cart (accepts `cart_id`) and logs events to `events` table for auditing.
 - Why: Admin tooling and audit trail for cross-cart manipulations.

10) src/routes/* (auth.js, products.js, cart.js, orders.js, customers.js, admin.js, adminCart.js)
 - What: Route definitions. `customers.js` added and uses `multer` for avatar uploads. `adminCart.js` added and mounted under `/api/admin`.

11) sql/001_add_customer_profile_fields.sql
 - What: Migration adding `avatar_url`, `phone`, `bio`, `marketing_opt_in`, `deleted_at`, `last_login_at`, `metadata` to `customers` and an index on email.
 - Status: Added to repo; must be applied to the Postgres/Supabase DB before relying on the new columns in production.

12) test/* (integration scripts)
 - `test/curl_commands.sh`: comprehensive curl-based integration script for signup/login (user & admin), product listing, image upload, cart, orders, analytics. Updated several times to reflect API changes.
 - `test/cross_user_cart.sh`: automated zsh script that creates two users and verifies one cannot modify another user's cart item (expects 403 on update/delete).
 - `test/run-cross-user.sh`: wrapper that auto-discovers a product id and runs `cross_user_cart.sh`.
 - `test/profile_integration.sh`: new integration script for profile flows (signup, PATCH /me, avatar upload, GET /me, DELETE /me).

Behavioral changes and security hardening
- Removed magic-link auth; adopted direct signup/login and admin credentials from env.
- Enforced server-side cart ownership to prevent cart hijacking. All `addItem` operations map to the session user's active cart; update/remove validate ownership and return 403 if not owned.
- Admin actions are gated by `process.env.ADMIN_ID` and `requireAdmin` middleware where applicable.
- Avatar storage: store object path in DB, generate signed URL at read-time, and delete storage object on account deletion.

Testing & verification performed
- Ran `test/cross_user_cart.sh` and `test/profile_integration.sh` against a running local API (examples logged). Both validated expected behavior (403 on cross-user modification; avatar upload and delete flow).

Pending / recommended actions
- Apply SQL migration `sql/001_add_customer_profile_fields.sql` to your Supabase/Postgres instance if not already applied.
- Consider creating a dedicated `AVATAR_BUCKET` (env var) to separate product and avatar images. Update code and optionally create a migration/ACL for the bucket.
- Add validation rules for profile fields (phone format, bio length) and rate-limit avatar uploads.
- Convert key integration scripts into Jest/Mocha tests and add them to CI to prevent regressions (recommended: `test:integration` job in GitHub Actions).

Where to look for specific flows
- Signup / auth: `src/controllers/authController.js` and `src/routes/auth.js`
- Cart ownership: `src/controllers/cartController.js`
- Profile flow: `src/controllers/customerController.js` and `src/routes/customers.js`
- Admin actions & analytics: `src/controllers/adminController.js`, `src/controllers/adminCartController.js`, `src/routes/admin.js`

Quick commands (run locally)
- Start server (dev): npm run dev
- Run cross-user protection test: API_BASE=http://localhost:3001/api npm run test:cross-user
- Run profile integration test: API_BASE=http://localhost:3001/api ./test/profile_integration.sh

Completion note
All listed changes are present in the repository under the paths above. I ran the integration scripts locally to validate the implemented behaviors where the API was available. If you want, I can now:
 - Apply the SQL migration to your DB (if you provide DB access or run locally),
 - Add CI integration to run these tests automatically,
 - Split avatar bucket and add server-side validation.

End of changelog.
